module gcd (
  input  logic       clk, rst,
  input  logic [3:0] a, b,
  input  logic       req_i,

  output logic [3:0] gcd_o,
  output logic       busy_o, valid_o
);

  logic [3:0] A;
  logic [3:0] B;
  logic [3:0] sub_ab;
  logic [3:0] outa;
  logic [3:0] outb;

  typedef enum logic [1:0] {
    WAIT = 2'd0,
    CALC = 2'd1,
    DONE = 2'd2
  } fsm_state;

  fsm_state state, next_state;

  always_ff @(posedge clk) begin
    if (rst) begin
      busy_o  <= 0;
      valid_o <= 0;
      gcd_o <= 0;
      state <= WAIT;
    end
    else begin
      case (state)
        WAIT: begin
          a_en  <= 1'b1;
          b_en  <= 1'b1;
          a_sel <= 2'd0;
          b_sel <= 1'b0;
          valid_o <= 1'b0;
          busy_o  <= 1'b0;
          if (req_i) next_state <= CALC;
          else     next_state <= WAIT;
        end
        CALC: begin
          valid_o <= 1'b0;
          busy_o  <= 1'b1;
          if (b_zero) begin
            next_state <= DONE;
          end
          if (a_lt) begin
            a_en  <= 1'b1;
            b_en  <= 1'b1;
            a_sel <= 2'd1;
            b_sel <= 1'b1;
            next_state <= CALC;
          end
          else begin
            a_en  <= 1'b1;
            b_en  <= 1'b1;
            a_sel <= 2'd2;
            b_sel <= 1'b1;
            next_state <= CALC;
          end
        end
        DONE: begin
          valid_o <= 1'b1;
          busy_o  <= 1'b0;
          next_state <= WAIT;
        end
      endcase
    end
  end

  mux41 muxa(
    .in0(a),
    .in1(B),
    .in2(sub_ab),
    .in3(0),
    .sel(a_sel),
    .out(outa)
  );

  mux21 muxb(
    .in0(b),
    .in1(A),
    .sel(b_sel),
    .out(outb)
  );

  dff a_ff(
    .clk(clk),
    .en(a_en),
    .d(outa),
    .q(A)
  );

  dff b_ff(
    .clk(clk),
    .en(b_en),
    .d(outb),
    .q(B)
  );
  assign b_zero = (B == 0);
  assign a_lt   = ((A < B) ? 1 : 0);
  assign sub_ab = A - B;
  assign gcd_o  = A;

endmodule
